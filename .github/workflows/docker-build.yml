name: Docker 自动构建与推送

# 触发条件：推送到main分支 或 创建Tag时触发
on:
  push:
    branches: [ main ]  # 代码推送到main分支时构建
    tags: [ 'v*' ]      # 打Tag（如v1.0.0）时构建（用于发版）
  pull_request:
    branches: [ main ]  # PR到main分支时也触发（可选，用于验证构建是否正常）

jobs:
  build:
    runs-on: ubuntu-latest  # 基于Ubuntu运行（通用且支持Docker Buildx）
    steps:
      # 1. 检出项目代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完整检出历史（如果需要基于Git信息打标签，可选）

      # 2. 设置Docker Buildx（支持多平台构建，如amd64/arm64）
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 登录Docker仓库（如需推送镜像，必选；如仅构建不推送，可删除此步骤）
      - name: 登录Docker Hub
        if: github.event_name != 'pull_request'  # PR时不登录（避免泄露凭证）
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # 你的Docker Hub用户名（需在GitHub仓库设置secrets）
          password: ${{ secrets.DOCKER_HUB_TOKEN }}     # Docker Hub访问令牌（非密码，在Docker Hub个人设置中生成）

      # 4. 缓存加速（Go模块缓存 + Docker层缓存，减少重复构建时间）
      - name: 缓存Go模块
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 缓存Docker层
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 5. 构建并推送Docker镜像（核心步骤，适配项目的Dockerfile）
      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .  # 构建上下文：项目根目录（与Dockerfile中COPY的路径匹配）
          file: ./Dockerfile  # Dockerfile路径（项目根目录的Dockerfile）
          push: ${{ github.event_name != 'pull_request' }}  # PR时仅构建不推送，其他情况推送
          platforms: linux/amd64,linux/arm64  # 构建多平台镜像（适配不同CPU架构，可选）
          # 镜像标签：根据触发事件设置不同标签（如main分支→latest，Tag→v1.0.0）
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/cloudstream:latest  # 固定latest标签（main分支推送时覆盖）
            ${{ secrets.DOCKER_HUB_USERNAME }}/cloudstream:${{ github.ref_name }}  # 分支名/Tag名标签（如main、v1.0.0）
          # Docker层缓存配置（加速后续构建）
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # 6. 清理缓存（避免缓存过大）
      - name: 清理缓存
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
